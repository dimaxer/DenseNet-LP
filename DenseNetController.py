
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 7.0
#  in conjunction with Tcl version 8.6
#    Dec 26, 2021 02:12:51 AM +0200  platform: Windows NT
import os
import sys
# root_folder = os.path.abspath(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
# sys.path.append(root_folder)
# print (root_folder)
import shutil
import tkinter as tk
import tkinter.messagebox as box
import tkinter.ttk as ttk
import webbrowser as browser
from tkinter import filedialog, font
from tkinter.constants import *
from tkinter.filedialog import askopenfilename

import DenseNetGui
import PreProcess
import source
import TestModel
import TrainModel
from source import GishaText_9, GitHub




def createWindow(width: int, height: int, title: str, root):
    # Create Window Instance and compute position and dimensions
    if root == None:
        window = tk.Tk()
    else:
        window = tk.Toplevel(root, bg="white")
    geometry_settings = "%dx%d+%d+%d" % (
        width, height, (window.winfo_screenwidth() - width) / 2, (window.winfo_screenheight() - height) / 2)

    # Basic Window Settings
    window.geometry(geometry_settings)
    window.wm_resizable(False, False)
    window.wm_title(title)

    # Return Instance
    return window


'''create the instruction window from the menu'''


def InstructionsWindow(root: tk.Toplevel, lebelString, about_header, about_footer, width, height):
    instructions = createWindow(width, height, lebelString, root)

    # About Window Content
    header = tk.Label(master=instructions, text=about_header, font=GishaText_9, bg="white").pack(fill='both')
    repository_link = tk.Label(master=instructions, text="link for GitHub", fg="Blue", cursor="hand2", bg="white")
    repository_link.bind("<Button-1>", lambda e: browser.open_new(GitHub))

    footer = tk.Label(master=instructions, text=about_footer, font=GishaText_9, bg="white").pack(fill='both')
    # Display About Window
    repository_link.pack()
    instructions.mainloop()

def createDirs():
    DataPath=os.path.join(source.MainPath,'data')
    DataSetPath=os.path.join(DataPath,'data_set')
    FeatureVectorsPath=os.path.join(DataPath,'feature_vectors')
    LabelsPath=os.path.join(DataPath,'labels')
    ResultsPath=os.path.join(source.MainPath,'results')
    GraphPath=os.path.join(source.MainPath,'graph')
    try:
        if not os.path.isdir(DataPath):
            os.mkdir(os.path.join(source.MainPath,'data'))
        if not os.path.isdir(DataSetPath):
            os.mkdir(DataSetPath)
        if not os.path.isdir(FeatureVectorsPath):
            os.mkdir(FeatureVectorsPath)
        if not os.path.isdir(LabelsPath):
            os.mkdir(LabelsPath)
        if not os.path.isdir(ResultsPath):
            os.mkdir(ResultsPath)
        if not os.path.isdir(GraphPath):
            os.mkdir(GraphPath)
    except Exception as e:
        print("Error while trying to create folders: "+str(e))

def main(*args):
    '''Main entry point for the application.'''
    global root
    root = tk.Tk()
    root.protocol('WM_DELETE_WINDOW', root.destroy)
    # Creates a toplevel widget.
    global _top1, Gui
    _top1 = root
    # os.chdir("../")
    source.MainPath=os.getcwd()
    source.initPath()
    createDirs()

    # os.chdir("Gui")
    Gui = DenseNetGui.Toplevel1(_top1)
    root.mainloop()


def ExitFunc(*args):

    root.destroy()
    sys.stdout.flush()


def ExportPreProccessing(*args):
    # os.chdir('../')
    MainPath = os.getcwd()
    directory_path_string = filedialog.askdirectory(initialdir=os.getcwd(), title="request_string")
    if ValiditeFolders(MainPath,"PreProcessing"):
        if not copyFolder('data',directory_path_string , MainPath) or \
                not copyFolder('graph', directory_path_string, MainPath):
                print("Error")
                printError("Error while trying to export files !")
        else:
            printInfo("Export Is Done !")

def ExportTraining(*args):
    # os.chdir('../')
    MainPath = os.getcwd()
    directory_path_string = filedialog.askdirectory(initialdir=os.getcwd(), title="request_string")
    if ValiditeFolders(MainPath,"Training"):
        if not copyFolder('data',directory_path_string , MainPath) or \
                not copyFolder('graph', directory_path_string, MainPath) or \
                not copyFolder('results', directory_path_string, MainPath):
                print("Error")
                printError("Error while trying to export files !")
        else:
            printInfo("Export Is Done !")



def LoadNewGraph(*args):
    source.Graph_absoloute_path = askopenfilename(initialdir="C:/Users/",
                                                  filetypes=(("Text File", "*.txt"), ("All Files", "*.*")),
                                                  title="Choose a Graph."
                                                  )
    source.set_graph_file_name(os.path.basename(source.Graph_absoloute_path))
    try:
        shutil.copy(source.Graph_absoloute_path, os.path.join(source.MainPath,'graph',source.Graph_name))
        updateOutputData("Graph file is loaded successfully : " + source.Graph_name)
    except FileNotFoundError as e:
        printError("Graph file is not loaded !")
        updateOutputData("Graph file is not loaded !")
    except Exception as e:
        print("Error while trying to copy the imported graph file into MainPath/graph: "+str(e))
        updateOutputData("Graph file is not loaded !")
        printError("Error while trying to copy the imported graph file into MainPath/graph: "+str(e))
    sys.stdout.flush()





def validateFields():
    ErrorMessage = "You Must set all the Fields"
    K = Gui.TCombobox1.get()
    Dimenstion = Gui.Dimenstion_entry.get()
    Distance = Gui.DistanceEntry.get()
    RemovedEdgePrecentage = Gui.RemovedEdgePrecentage_entry.get()
    Missing_Fields = False
    if K == "":
        ErrorMessage = ErrorMessage + "\nK is empty"
        Missing_Fields = True
    if Dimenstion == "":
        ErrorMessage = ErrorMessage + "\nDimenstion is empty"
        Missing_Fields = True
    if Distance == "":
        ErrorMessage = ErrorMessage + "\nH-hop Distance is empty"
        Missing_Fields = True
    if RemovedEdgePrecentage == "":
        ErrorMessage = ErrorMessage + "\nRemoved Edge Precentage is empty"
        Missing_Fields = True
    if source.Graph_name == "":
        ErrorMessage = ErrorMessage + "\nGraph is not loaded"
        Missing_Fields = True
    if Missing_Fields:
        printError(ErrorMessage)
        return False
    else:
        source.K = int(K)
        try:
            if int(Distance) <= 0:
                printError("H-hop Distance must be bigger then zero")
                return False

            source.distance = int(Distance)
            source.percentage_of_negative_class_additions = 1 - float(RemovedEdgePrecentage)
            if int(Dimenstion) <= 0 :
                printError("Dimension of features must be bigger then zero")
                return False
            source.DimensionOfFeatures = Dimenstion
        except ValueError as e:
            printError("You must insert an integer number at Dimension of features,H-hop Distance")
            return False

        if 0 > float(RemovedEdgePrecentage) or float(RemovedEdgePrecentage) > 1:
            printError("RemovedEdgePrecentage must be in range [ 0, 1 ]")
            return False
        source.percentage_of_edges_to_remove = float(RemovedEdgePrecentage)
        return True


def RunPreProccessing(*args):
    if validateFields():
        try:
            Gui.TProgressbar1['maximum'] = 100
        except Exception as e:
            print(e)

        source.progress_cnt = source.progress_cnt + 1
        Gui.TProgressbar1['value'] = source.progress_cnt % int(100)
        Gui.TProgressbar1.update()
        PreProcess.runPreProcess(source.Graph_absoloute_path)
        #sys.stdout.flush()







'''initialize the progress bar Max value'''


def InitProgressBar(*args):
    path=str(os.getcwd())
    size=0
    for arg in args:
        size=arg
    try:
        Gui.TProgressbar1['maximum'] = size + 20
    except Exception as e:
        printError(e)
        print("Error while Initialize Progress Bar"+str(e))



'''Update the progress bar'''


def updateProgressBar(size,end):
    try:
        if end == 0 :
            source.progress_cnt = source.progress_cnt + 1
            Gui.TProgressbar1['value'] = source.progress_cnt % int(size+20)
            Gui.TProgressbar1.update()
        else:
            Gui.TProgressbar1['value'] = int(size + 20)
            Gui.TProgressbar1.update()
            Gui.PreProccessingList.insert("end","Pre Processing stage is Done")
            printInfo("Pre Processing stage is Done")
    except Exception as e:
        print(e)
        printError(e)
    return

if __name__ == '__main__':
    DenseNetGui.start_up()


def updateOutputData(data):
    Gui.PreProccessingList.insert("end",data)


def printError(ErrorMessage):
    box.showerror('Error', ErrorMessage)

def printInfo(data):
    box.showinfo('info', data)


def copyFolder(folder_name, MainPath, directory_path):
    src = os.path.join(directory_path, folder_name)
    dst = os.path.join(MainPath,folder_name)
    if os.path.isdir(dst):
        shutil.rmtree(dst)
    try:
        shutil.copytree(src,dst)
    except Exception as e:
        print(e)
        printError(e)
        print("Error while copy the folder:"+folder_name+ "to the path: " +dst)
        printError("Error while copy the folder:"+folder_name+ "to the path: " +dst)
        return False
    return True


def TrainImportData():
    # os.chdir('../')

    directory_path_string = filedialog.askdirectory(initialdir=os.getcwd(), title="request_string")
    if ValiditeFolders(directory_path_string,"Training_import"):
        MainPath=os.getcwd()
        if not copyFolder('data',MainPath,directory_path_string) or \
        not copyFolder('graph', MainPath, directory_path_string) :
            print("Error")
    # os.chdir('Gui')

def LoadImportData():
    # os.chdir('../')

    directory_path_string = filedialog.askdirectory(initialdir=os.getcwd(), title="request_string")
    if ValiditeFolders(directory_path_string,"Test"):
        MainPath=os.getcwd()
        if not copyFolder('data',MainPath,directory_path_string) or \
        not copyFolder('graph', MainPath, directory_path_string) or \
        not copyFolder('results', MainPath, directory_path_string): \
            print("Error")
    # os.chdir('Gui')

def RunTraining():
    source.TrainModel = True
    Gui.TrainingList.delete(0,END)
    Epoch_num=""
    Batch_size=""
    # os.chdir('../')
    try:
        if Gui.epoch_entry.get() != "":
                Epoch_num = int(Gui.epoch_entry.get())
        if Gui.batchCombobox.get() != "":
            Batch_size = int(Gui.batchCombobox.get())
        ErrorMessage = "You Must set all Fields"
        validateFields = False
        if Batch_size == "":
            ErrorMessage= ErrorMessage + "\nyou must set Batch Size Field"
            validateFields = True
        if validateFields:
            print (ErrorMessage)
            printError(ErrorMessage)
        else:
                if int(Epoch_num) <= 0 :
                    printError("Epoch Number size must be bigger then zero")
                    return
                source.batch_size=Batch_size
                source.n_epochs=Epoch_num
                TrainModel.startTrain()
    except ValueError as e:
        printError("You must insert an integer number at Epoch number")



    # os.chdir('Gui')



def ValiditeFolders(path,Usage) :
    ErrorMessage = "seems that you have missing folders"
    try:
        DirectortList=os.listdir(path)
    except FileNotFoundError as e:
        if not e.filename == "":
            printError("Error while trying to import file/directory\n"+str(e.filename))
        else:
            return False
    except Exception as e:
        print("Error while trying to import Data: "+str(e))
    missFolder=False
    if "data" not in DirectortList:
        ErrorMessage= ErrorMessage + "\ndata folder Not found"
        print ("data folder Not found")
        missFolder=True
    if "graph" not in DirectortList:
        ErrorMessage = ErrorMessage + "\ngraph folder Not found"
        print("graph folder Not found")
        missFolder = True
    if "results" not in DirectortList and (Usage=="Training" or Usage=="Test"):
        ErrorMessage = ErrorMessage + "\nresults folder Not found"
        print("results folder Not found")
        missFolder = True
    if missFolder:
        printError(ErrorMessage)
        return False
    else:
        return True


def UpdateTrainingListBox(data):
    Gui.TrainingList.insert("end", data)
    Gui.TrainingList.see("end")
    Gui.TrainingList.update()

def UpdateLoadListBox(data):

    Gui.LoadList.insert("end", data)
    Gui.LoadList.see("end")
    Gui.LoadList.update()

def ExportTrainResults():
    ExportTraining()


def getEpoches():
    return int(Gui.epoch_entry.get())

def RunTest():
    source.TrainModel = False
    TestModel.RunLoadModel()

def ExportTestResults():
    ExportTraining()

def getTrainModelStatus():
    return source.TrainModel
